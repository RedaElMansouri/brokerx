

<!-- Header -->
<header class="header">
    <div class="container">
    <nav class="nav">
        <div class="logo">Broker<span>X+</span></div>
            <ul class="nav-links">
                <li><a href="#features">Fonctionnalit√©s</a></li>
                <li><a href="#how">Comment √ßa marche</a></li>
                <li><a href="#faq">FAQ</a></li>
            </ul>
        <div style="display:flex; gap:12px; align-items:center;">
        <a id="createBtn" class="cta-button" href="#" style="background:#48bb78;color:#fff">Cr√©er un compte</a>
        <a id="loginBtn" class="cta-button" href="#">Se connecter</a>
        </div>
    </nav>
    </div>
</header>

    <!-- Hero Section -->
    <section class="hero">
        <div class="container">
            <h1>Investissez en toute simplicit√©</h1>
            <p>Cr√©ez un compte, cr√©ditez votre portefeuille, et passez vos ordres d‚Äôachat/vente.</p>
            <a href="#how" class="cta-button">Voir comment √ßa marche</a>
        </div>
    </section>

    <!-- Features Section -->
    <section id="features" class="features">
        <div class="container">
            <h2 class="section-title">Ce que vous pouvez faire</h2>
            <div class="features-grid">
                <div class="feature-card">
                    <div class="feature-icon">üßë‚Äçüíº</div>
                    <h3>Cr√©er un compte</h3>
                    <p>Inscrivez-vous en quelques clics. Pour s√©curiser l‚Äôacc√®s, un code MFA (double v√©rification) vous est envoy√©.</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">üè¶</div>
                    <h3>Approvisionner votre portefeuille</h3>
                    <p>Effectuez un d√©p√¥t virtuel pour disposer de liquidit√©s et pouvoir passer des ordres d‚Äôachat.</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">ÔøΩ</div>
                    <h3>Passer des ordres</h3>
                    <p>Choisissez un symbole, le type d‚Äôordre (march√©/limite), la quantit√© et validez votre transaction.</p>
                </div>
            </div>
        </div>
    </section>

    <section id="how" class="architecture">
        <div class="container">
            <h2 class="section-title">Comment √ßa marche</h2>
            <div class="arch-diagram">
                <div class="arch-layer">
                    <h4>1. Inscription et connexion</h4>
                    <p>Cr√©ez votre compte puis connectez-vous. Pour confirmer votre identit√©, nous vous envoyons un code MFA par e‚Äëmail. Entrez ce code pour acc√©der √† votre espace.</p>
                </div>
                <div class="arch-layer">
                    <h4>2. D√©p√¥t de fonds (virtuel)</h4>
                    <p>Rendez-vous dans ¬´ Mon portefeuille ¬ª et effectuez un d√©p√¥t. Le montant est imm√©diatement ajout√© √† votre solde disponible.</p>
                </div>
                <div class="arch-layer">
                    <h4>3. Passer un ordre</h4>
                    <p>Sur la page ¬´ Passer un ordre ¬ª, indiquez le symbole (ex. AAPL), le type d‚Äôordre (march√© ou limite), la quantit√© et, si besoin, le prix. Confirmez pour envoyer.</p>
                </div>
                <div class="arch-layer">
                    <h4>4. Suivre votre portefeuille</h4>
                    <p>Consultez √† tout moment votre solde disponible, la part r√©serv√©e pour vos ordres en cours et l‚Äôhistorique de vos d√©p√¥ts.</p>
                </div>
            </div>
        </div>
    </section>

    <section id="faq" class="status">
        <div class="container">
            <h2 class="section-title">Questions fr√©quentes</h2>
            <div class="status-grid">
                <div class="status-item">
                    <h3>Pourquoi la double v√©rification (MFA) ?</h3>
                    <p>Elle s√©curise l‚Äôacc√®s √† votre compte en demandant un code unique envoy√© par e‚Äëmail lors de la connexion.</p>
                </div>
                <div class="status-item">
                    <h3>Mon d√©p√¥t est‚Äëil r√©el ?</h3>
                    <p>Non, il est virtuel et sert √† simuler des op√©rations en toute s√©curit√©.</p>
                </div>
                <div class="status-item">
                    <h3>Puis‚Äëje annuler un ordre ?</h3>
                    <p>Oui, tant qu‚Äôil n‚Äôest pas d√©j√† ex√©cut√©. Les fonds r√©serv√©s sont alors remis √† disposition.</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Architecture Section -->
    <section id="architecture" class="architecture">
        <div class="container">
            <h2 class="section-title">Architecture Hexagonale</h2>
            <div class="arch-diagram">
                <div class="arch-layer">
                    <h4>üèóÔ∏è Domain Layer (C≈ìur M√©tier)</h4>
                    <p>Entities, Value Objects, r√®gles m√©tier pures - Zero d√©pendances externes</p>
                </div>
                <div class="arch-layer">
                    <h4>üéØ Application Layer (Use Cases)</h4>
                    <p>Services applicatifs, DTOs, coordination du domaine - D√©pend uniquement du Domain</p>
                </div>
                <div class="arch-layer">
                    <h4>üîå Infrastructure Layer (Adaptateurs)</h4>
                    <p>Rails API, PostgreSQL, Repositories - Impl√©mente les ports d√©finis par le Domain</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Status Section -->
    <section id="status" class="status">
        <div class="container">
            <h2 class="section-title">√âtat du Projet</h2>
            <div class="status-grid">
                <div class="status-item success">
                    <div class="status-icon">‚úÖ</div>
                    <h3>Architecture</h3>
                    <p>Conception DDD compl√®te avec 3 Bounded Contexts</p>
                </div>
                <div class="status-item success">
                    <div class="status-icon">‚úÖ</div>
                    <h3>Domain Models</h3>
                    <p>Entit√©s et Value Objects impl√©ment√©s</p>
                </div>
                <div class="status-item success">
                    <div class="status-icon">‚úÖ</div>
                    <h3>Infrastructure</h3>
                    <p>Rails API + PostgreSQL configur√©s</p>
                </div>
                <div class="status-item warning">
                    <div class="status-icon">üîÑ</div>
                    <h3>API Endpoints</h3>
                    <p>En cours de finalisation</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Footer -->
    <footer class="footer">
        <div class="container">
            <p>&copy; 2025 BrokerX+. Projet acad√©mique LOG430 - Architecture Logicielle Avanc√©e.</p>
            <p>Architecture Hexagonale ‚Ä¢ Domain-Driven Design ‚Ä¢ Clean Architecture</p>
        </div>
    </footer>

    <script>
                // --- Login modal logic ---
                const loginBtn = document.getElementById('loginBtn');
                // Create modal HTML
                const loginModalHtml = `
                <div id="loginModal" style="position:fixed;inset:0;display:flex;align-items:center;justify-content:center;background:rgba(0,0,0,0.5);z-index:2000;">
                    <div style="background:#fff;padding:24px;border-radius:8px;max-width:420px;width:100%;box-shadow:0 10px 40px rgba(0,0,0,0.3);">
                        <h2 style="margin-bottom:8px;color:#2d3748">Se connecter</h2>
                        <p style="margin:0 0 12px 0;color:#4a5568;font-size:0.95rem">Entrez vos identifiants pour vous connecter.</p>
                        <form id="loginForm">
                            <div style="margin-bottom:8px;"><input id="loginEmail" type="email" placeholder="Email" required style="width:100%;padding:10px;border:1px solid #e2e8f0;border-radius:6px;"/></div>
                            <div style="margin-bottom:12px;"><input id="loginPassword" type="password" placeholder="Mot de passe" required style="width:100%;padding:10px;border:1px solid #e2e8f0;border-radius:6px;"/></div>
                            <div style="display:flex;gap:8px;justify-content:flex-end;">
                                <button type="button" id="cancelLogin" style="background:#edf2ff;color:#4a5568;padding:10px 14px;border-radius:8px;border:none;">Annuler</button>
                                <button type="submit" style="background:#667eea;color:#fff;padding:10px 14px;border-radius:8px;border:none;">Se connecter</button>
                            </div>
                            <p id="loginFeedback" style="margin-top:10px;color:#e53e3e;display:none"></p>
                        </form>
                    </div>
                </div>
                `;

                function openLoginModal() {
                    if (document.getElementById('loginModal')) return;
                    document.body.insertAdjacentHTML('beforeend', loginModalHtml);
                    const cancel = document.getElementById('cancelLogin');
                    const form = document.getElementById('loginForm');
                    const feedback = document.getElementById('loginFeedback');

                    cancel.addEventListener('click', closeLoginModal);

                    form.addEventListener('submit', async (e) => {
                        e.preventDefault();
                        feedback.style.display = 'none';
                        const email = document.getElementById('loginEmail').value;
                        const password = document.getElementById('loginPassword').value;
                        try {
                            const res = await fetch('/api/v1/auth/login', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                                body: JSON.stringify({ email, password })
                            });
                            const data = await res.json();
                            if (!res.ok) {
                                feedback.textContent = data.error || data.message || 'Erreur de connexion';
                                feedback.style.display = 'block';
                                return;
                            }
                            // success ‚Äî server may ask for MFA
                            if (data.mfa_required) {
                                // ask for code
                                const code = prompt('Un code a √©t√© envoy√© par e-mail. Entrez le code MFA :');
                                if (!code) {
                                    feedback.textContent = 'MFA requis';
                                    feedback.style.display = 'block';
                                    return;
                                }
                                // verify MFA
                                const verifyRes = await fetch('/api/v1/auth/verify_mfa', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                                    body: JSON.stringify({ email, code })
                                });
                                const verifyData = await verifyRes.json();
                                if (!verifyRes.ok) {
                                    feedback.textContent = verifyData.error || 'MFA invalide';
                                    feedback.style.display = 'block';
                                    return;
                                }
                                                                
                                                                feedback.style.color = '#2f855a';
                                                                feedback.textContent = 'Connect√© ‚úì';
                                                                feedback.style.display = 'block';
                                                                if (verifyData.token) {
                                                                    localStorage.setItem('auth_token', verifyData.token);
                                                                    
                                                                    window.location.href = '/orders';
                                                                    return;
                                                                }
                                                                setTimeout(closeLoginModal, 800);
                                return;
                            }
                                                        
                                                        feedback.style.color = '#2f855a';
                                                        feedback.textContent = 'Connect√© ‚úì';
                                                        feedback.style.display = 'block';
                                                        if (data.token) {
                                                            localStorage.setItem('auth_token', data.token);
                                                            window.location.href = '/orders';
                                                            return;
                                                        }
                                                        setTimeout(closeLoginModal, 800);
                        } catch (err) {
                            feedback.textContent = 'Impossible de contacter le serveur';
                            feedback.style.display = 'block';
                        }
                    });
                }

                function closeLoginModal() {
                    const node = document.getElementById('loginModal');
                    if (node) node.remove();
                }

                loginBtn && loginBtn.addEventListener('click', (e) => { e.preventDefault(); openLoginModal(); });
                const createBtn = document.getElementById('createBtn');

                const createModalHtml = `
                <div id="createModal" style="position:fixed;inset:0;display:flex;align-items:center;justify-content:center;background:rgba(0,0,0,0.5);z-index:2000;">
                    <div style="background:#fff;padding:24px;border-radius:8px;max-width:520px;width:100%;box-shadow:0 10px 40px rgba(0,0,0,0.3);">
                        <h2 style="margin-bottom:8px;color:#2d3748">Cr√©er un compte</h2>
                        <p style="margin:0 0 12px 0;color:#4a5568;font-size:0.95rem">Remplissez le formulaire pour cr√©er un compte client.</p>
                        <form id="createForm">
                            <div style="display:grid;grid-template-columns:1fr 1fr;gap:8px;margin-bottom:8px;">
                                <input id="firstName" placeholder="Pr√©nom" required style="padding:10px;border:1px solid #e2e8f0;border-radius:6px;" />
                                <input id="lastName" placeholder="Nom" required style="padding:10px;border:1px solid #e2e8f0;border-radius:6px;" />
                            </div>
                            <div style="margin-bottom:8px;"><input id="regEmail" type="email" placeholder="Email" required style="width:100%;padding:10px;border:1px solid #e2e8f0;border-radius:6px;"/></div>
                            <div style="margin-bottom:8px;"><input id="dob" type="date" placeholder="Date de naissance" required style="width:100%;padding:10px;border:1px solid #e2e8f0;border-radius:6px;"/></div>
                            <div style="margin-bottom:12px;"><input id="regPassword" type="password" placeholder="Mot de passe" required style="width:100%;padding:10px;border:1px solid #e2e8f0;border-radius:6px;"/></div>
                            <div style="display:flex;gap:8px;justify-content:flex-end;">
                                <button type="button" id="cancelCreate" style="background:#edf2ff;color:#4a5568;padding:10px 14px;border-radius:8px;border:none;">Annuler</button>
                                <button type="submit" style="background:#48bb78;color:#fff;padding:10px 14px;border-radius:8px;border:none;">Cr√©er</button>
                            </div>
                            <p id="createFeedback" style="margin-top:10px;color:#e53e3e;display:none"></p>
                        </form>
                    </div>
                </div>
                `;

                function openCreateModal() {
                    if (document.getElementById('createModal')) return;
                    document.body.insertAdjacentHTML('beforeend', createModalHtml);
                    const cancel = document.getElementById('cancelCreate');
                    const form = document.getElementById('createForm');
                    const feedback = document.getElementById('createFeedback');

                    cancel.addEventListener('click', () => { const n = document.getElementById('createModal'); if (n) n.remove(); });

                    form.addEventListener('submit', async (e) => {
                        e.preventDefault();
                        feedback.style.display = 'none';
                        const payload = {
                            client: {
                                email: document.getElementById('regEmail').value,
                                first_name: document.getElementById('firstName').value,
                                last_name: document.getElementById('lastName').value,
                                date_of_birth: document.getElementById('dob').value,
                                password: document.getElementById('regPassword').value
                            }
                        };

                        try {
                            const res = await fetch('/api/v1/clients/register', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                                body: JSON.stringify(payload)
                            });
                            const data = await res.json();
                                    if (!res.ok) {
                                        feedback.textContent = data.error || (data.errors && JSON.stringify(data.errors)) || 'Erreur lors de la cr√©ation';
                                        feedback.style.display = 'block';
                                        return;
                                    }
                                    feedback.style.color = '#2f855a';
                                    feedback.textContent = 'Compte cr√©√©. Un code de v√©rification a √©t√© envoy√© √† votre email.';
                                    feedback.style.display = 'block';

                                    // prompt for verification token to activate immediately (or user can check email)
                                    const token = prompt('Entrez le code de v√©rification envoy√© par e-mail pour activer votre compte :');
                                    if (token) {
                                        try {
                                            const verifyRes = await fetch(`/api/v1/clients/verify?token=${encodeURIComponent(token)}`);
                                            const verifyData = await verifyRes.json();
                                            if (!verifyRes.ok) {
                                                alert('V√©rification √©chou√©e: ' + (verifyData.error || 'error'));
                                            } else {
                                                alert('Compte activ√©. Vous pouvez maintenant vous connecter.');
                                                const n = document.getElementById('createModal'); if (n) n.remove();
                                            }
                                        } catch (err) {
                                            alert('Impossible de contacter le serveur pour v√©rification');
                                        }
                                    } else {
                                        // close after short delay
                                        setTimeout(() => { const n = document.getElementById('createModal'); if (n) n.remove(); }, 1200);
                                    }
                        } catch (err) {
                            feedback.textContent = 'Impossible de contacter le serveur';
                            feedback.style.display = 'block';
                        }
                    });
                }

                createBtn && createBtn.addEventListener('click', (e) => { e.preventDefault(); openCreateModal(); });

        // Smooth scrolling pour les ancres
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });

        // Animation simple au scroll
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0)';
                }
            });
        }, observerOptions);

        // Observer les √©l√©ments √† animer
        document.querySelectorAll('.feature-card, .arch-layer, .status-item').forEach(el => {
            el.style.opacity = '0';
            el.style.transform = 'translateY(20px)';
            el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
            observer.observe(el);
        });
    </script>