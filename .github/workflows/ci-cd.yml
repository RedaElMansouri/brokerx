name: CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: brokerx_test
          POSTGRES_USER: brokerx
          POSTGRES_PASSWORD: brokerxpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U brokerx -d brokerx_test" \
          --health-interval=10s \
          --health-timeout=5s \
          --health-retries=5

    env:
      RAILS_ENV: test
      DATABASE_HOST: 127.0.0.1
      DATABASE_PORT: 5432
      DATABASE_USERNAME: brokerx
      DATABASE_PASSWORD: brokerxpass
      POSTGRES_DB: brokerx_test

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.2'
          bundler-cache: true

      - name: Install system deps
        run: sudo apt-get update && sudo apt-get install -y libpq-dev

      - name: Set up Node (optional)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install JS deps (if any)
        run: |
          if [ -f package.json ]; then
            corepack enable || true
            yarn install --frozen-lockfile || true
          fi

      - name: Prepare database
        run: |
          bin/rails db:prepare

      - name: Run tests
        run: |
          if [ -d spec ]; then
            bundle exec rspec
          else
            bundle exec rails test
          fi

      - name: RuboCop (non-blocking)
        run: |
          if bundle exec rubocop -v >/dev/null 2>&1; then
            bundle exec rubocop || true
          fi

  build-and-push:
    name: Build and push to GHCR
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=tag

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set IMAGE output
        id: image
        run: |
          IMAGE="$(echo "${{ steps.meta.outputs.tags }}" | tr ' ' '\n' | grep -E 'latest$|:\w{7,}$' | head -n1)"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

    outputs:
      image: ${{ steps.image.outputs.image }}